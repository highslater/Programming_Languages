
use "Dhw1.sml";

(*--------------------------------------------------------------------------------*)

(* Homework1 Simple Test *)
(* These are basic test cases. Passing these tests does not guarantee that your code will pass the actual homework grader *)
(* To run the test, add a new line to the top of this file: use "homeworkname.sml"; *)
(* All the tests should evaluate to true. For example, the REPL should say: val test1 = true : bool *)


(*--------------------------------------------------------------------------------*)

val test1 = is_older ((1,2,3),(2,3,4)) = true
val test2 = number_in_month ([(2012,2,28),(2013,12,1)],2) = 1
val test3 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4]) = 3
								  
(*--------------------------------------------------------------------------------*)

val test2_01 = number_in_month ([(2012,2,28),(2013,12,1)],2) = 1
val test2_02 = number_in_month ([(1,2,3),(2,2,3),(3,2,3)],2) = 3
val test2_03 = number_in_month ([(1,1,3),(2,2,3),(3,2,3)],2) = 2
val test2_04 = number_in_month ([(1,1,3),(2,1,3),(3,2,3)],2) = 1
val test2_05 = number_in_month ([(1,1,3),(2,1,3),(3,1,3)],2) = 0

								   (*--------------------------------------------------------------------------------*)
								   
								   
val test3_01 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[5]) = 0
val test3_02 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2]) = 1
val test3_03 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[3]) = 1
val test3_04 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[4]) = 1
val test3_05 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3]) = 2
val test3_06 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[3,4]) = 2
val test3_07 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,4]) = 2

(*--------------------------------------------------------------------------------*)
												
val test4 = dates_in_month ([(2012,2,28),(2013,12,1)],2) = [(2012,2,28)]
val test4a = dates_in_month ([(2012,2,28),(2013,2,1)],2) = [(2012,2,28), (2013,2,1)]

(*--------------------------------------------------------------------------------*)
							       
val test5 = dates_in_months(
[(2012,2,28), (2013,12,1),
(2011,3,31), (2011,4,28)],
[2,3,4]) = [(2012,2,28),(2011,3,31),(2011,4,28)]
	       
(*--------------------------------------------------------------------------------*)
	       
val test6 = get_nth (["hi", "there", "how", "are", "you"], 2) = "there"


(*								    
val test6a = get_nth (["hi", "there", "how", "are", "you"],
		      0) = "value greater than zero required"
*)
			       

val test6b = get_nth (["hi", "there", "how", "are", "you"],
		      1) = "hi"
(*--------------------------------------------------------------------------------*)
	       
val test7 = date_to_string (2013, 6, 1) = "June 1, 2013"


(*--------------------------------------------------------------------------------*)
					      
val test8 = number_before_reaching_sum (10, [1,2,3,4,5]) = 3

					  
(*--------------------------------------------------------------------------------*)
					  
val test9 = what_month 70 = 3


(*--------------------------------------------------------------------------------*)
				
val test10 = month_range (31, 34) = [1,2,2,2]


(*--------------------------------------------------------------------------------*)

					
val test11a = oldest([]) = NONE
val test11b = oldest([(2012,2,28)]) = SOME (2012,2,28)
val test11f = oldest([(2012,2,28),(2011,3,31)]) = SOME (2011,3,31)
val test11g = oldest([(2011,3,31),(2012,2,28)]) = SOME (2011,3,31)

val test11c = oldest([(2012,2,28),(2011,4,28), (2011,3,31)]) = SOME (2011,3,31)
val test11e = oldest([(2012,2,28),(2011,3,31),(2011,4,28)]) = SOME (2011,3,31)
val test11h = oldest([(2011,4,28),(2012,2,28),(2011,3,31)]) = SOME (2011,3,31) (*FAIL*)
val test11i = oldest([(2011,3,31),(2011,4,28),(2012,2,28)]) = SOME (2011,3,31)
val test11j = oldest([(2011,4,28), (2011,3,31),(2012,2,28)]) = SOME (2011,3,31)
val test11k = oldest([(2011,3,31),(2011,4,28),(2012,2,28)]) = SOME (2011,3,31)

val test11d = oldest([(1963,4,10),(2012,2,28),(2011,4,28),(2011,3,31)]) = SOME (1963,4,10)
val test11l = oldest([(2012,2,28),(1963,4,10),(2011,4,28),(2011,3,31)]) = SOME (1963,4,10)
val test11m = oldest([(2012,2,28),(2011,4,28),(1963,4,10),(2011,3,31)]) = SOME (1963,4,10)
val test11n = oldest([(2012,2,28),(2011,4,28),(2011,3,31),(1963,4,10)]) = SOME (1963,4,10)
val test11o = oldest([(1963,4,10),(2012,2,28),(2011,4,28),(2011,3,31)]) = SOME (1963,4,10)

val test11p = oldest([(2011,4,28),(2012,2,28),(2011,3,31),(1963,4,10)]) = SOME (1963,4,10) (*FAIL*)
val test11q = oldest([(5,5,2),(5,10,2),(5,2,2),(5,12,2)]) = SOME (5,2,2) (* FAIL *)
(**)
