(* 4. Write a function dates_in_month that takes a list of dates and a month
(i.e., an int) and returns a list holding the dates from the argument list of dates
that are in the month. The returned list should contain dates in the order they were
originally given.
val dates_in_month = fn : (int * int * int) list * int -> (int * int * int) list
*)


fun date_in_month (ds : (int * int * int) list, m) =
  if null ds then [] 
  else if #2 (hd ds) = m then (hd ds) :: date_in_month (tl ds, m)
  else date_in_month (tl ds,m )
 

fun dates_in_month (ds : (int * int * int) list, m : int) =
   [(2012,2,28)]
  

val test4 = dates_in_month ([(2012,2,28),(2013,12,1)],2) = [(2012,2,28)]


(*--------------------------------------------------------------------------------*)
(*
fun number_in_months (ds : (int * int * int) list, ms : int list) =
  let fun number_in_month (ds : (int * int * int) list) =
	if null ds then 0
	else if  #2 (hd ds) = hd ms then  1 +  number_in_month(tl ds)
	else  number_in_month(tl ds)
  in if null ms then 0
     else number_in_month(ds) + number_in_months(ds, tl ms)
  end

*)
