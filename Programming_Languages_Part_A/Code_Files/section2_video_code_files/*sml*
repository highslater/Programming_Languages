use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
21_SCRATCH.sml:282.3-284.39 Error: case object and rules don't agree [tycon mismatch]
  rule domain: string option
  object: string
  in expression:
    (case f
      of NONE => f ^ " " ^ l
       | SOME m => <exp> ^ <exp> ^ " " ^ l)

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- 
= = = = stdIn:44.24-44.32 Error: syntax error: deleting  COLON ID ARROW
stdIn:45.1-45.23 Error: syntax error: deleting  DATATYPE ID EQUALOP
stdIn:45.29-45.35 Error: syntax error: deleting  OF ID
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val eval_Student_id = fn : id -> string
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val SIsn = StudentNum 42 : id
val SIfl = Name ("First",NONE,"Last") : id
val SIfml = Name ("First",SOME "Middle","Last") : id
val eval_Student_id = fn : id -> string
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val SIsn = StudentNum 42 : id
val SIfl = Name ("First",NONE,"Last") : id
val SIfml = Name ("First",SOME "Middle","Last") : id
val eval_Student_id = fn : id -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
val SIsn = StudentNum 42 : id
val SIfl = Name ("First",NONE,"Last") : id
val SIfml = Name ("First",SOME "Middle","Last") : id
val eval_Student_id = fn : id -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:572.9-572.16 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:573.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:575.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15-574.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:575.18-575.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l
21_SCRATCH.sml:578.6-578.42 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id sn
21_SCRATCH.sml:579.6-579.52 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id fl
21_SCRATCH.sml:580.6-580.60 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id fml

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
-     eval_Student_id fml

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- 
= = = stdIn:51.10-51.25 Error: syntax error: deleting  EXCEPTION ID
stdIn:52.14-52.16 Error: syntax error: deleting  DOT DOT
- 

Process sml finished
Standard ML of New Jersey v110.78 [built: Thu Jul 23 11:21:58 2015]
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
[autoloading]
[autoloading done]
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
[autoloading]
[autoloading done]
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:572.9-572.16 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:573.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:575.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15-574.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:575.18-575.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l
21_SCRATCH.sml:578.6-578.42 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id sn
21_SCRATCH.sml:579.6-579.52 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id fl
21_SCRATCH.sml:580.6-580.60 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id fml

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:572.10-572.17 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:573.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:575.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15-574.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:575.18-575.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l
21_SCRATCH.sml:578.6-578.42 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id sn
21_SCRATCH.sml:579.6-579.52 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id fl
21_SCRATCH.sml:580.6-580.60 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id fml

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:572.10-572.17 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:573.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:575.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15-574.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:575.18-575.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l
21_SCRATCH.sml:578.6-578.44 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id SIsn
21_SCRATCH.sml:579.6-579.54 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id SIfl
21_SCRATCH.sml:580.6-580.62 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id SIfml

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:560.13-560.18 Error: unbound variable or constructor: S_Num
21_SCRATCH.sml:561.13-561.19 Error: unbound variable or constructor: S_Name
21_SCRATCH.sml:562.14-562.20 Error: unbound variable or constructor: S_Name
21_SCRATCH.sml:572.10-572.17 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:573.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:575.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:574.15-574.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:575.18-575.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l
21_SCRATCH.sml:579.6-579.54 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id SIfl
21_SCRATCH.sml:580.6-580.62 Error: operator and operand don't agree [tycon mismatch]
  operator domain: StudentId
  operand:         id
  in expression:
    eval_Student_id SIfml

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:566.6-566.48 Error: expression doesn't match constraint [tycon mismatch]
  expression: StudentId
  constraint: id
  in expression:
    S_Name ("First",NONE,"Last"): id
21_SCRATCH.sml:567.6-567.58 Error: expression doesn't match constraint [tycon mismatch]
  expression: StudentId
  constraint: id
  in expression:
    S_Name ("First",SOME "Middle","Last"): id
21_SCRATCH.sml:573.10-573.17 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:574.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:576.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:575.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:575.15-575.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:576.18-576.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
21_SCRATCH.sml:573.10-573.17 Error: non-constructor applied to argument in pattern
21_SCRATCH.sml:574.8 Error: unbound variable or constructor: m
21_SCRATCH.sml:576.18 Error: unbound variable or constructor: f
21_SCRATCH.sml:575.15 Error: unbound variable or constructor: f
21_SCRATCH.sml:575.15-575.26 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ l
21_SCRATCH.sml:576.18-576.39 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string * string
  operand:         string * char
  in expression:
    <errorvar> ^ " " ^ m ^ " " ^ l

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 42 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val sum_triple3 = fn : int * int * int -> int
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = <hidden-value> : int * int * int -> int
val sum_triple2 = <hidden-value> : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = <hidden-value>
  : {first:string, last:string, middle:string} -> string
val full_name2 = <hidden-value>
  : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple1 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val sum_triple2 = fn : int * int * int -> int
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
val it = () : unit
- val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
val it = () : unit
- 
= = = stdIn:10.22-10.27 Error: syntax error: deleting  COLON ID
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:751.10-751.16 Error: syntax error: replacing  ORELSE with  AS
21_SCRATCH.sml:751.5-751.22 Error: pattern to left of AS must be variable

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:751.11-751.17 Error: syntax error: replacing  ORELSE with  AS
21_SCRATCH.sml:751.5-751.23 Error: pattern to left of AS must be variable

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:751.8-751.11 Error: syntax error: replacing  VAL with  LBRACE
21_SCRATCH.sml:751.23-752.11 Error: syntax error: deleting  SEMICOLON VAL
21_SCRATCH.sml:752.12 Error: syntax error: inserting  COMMA
21_SCRATCH.sml:752.23-753.14 Error: syntax error: deleting  SEMICOLON ID ORELSE
21_SCRATCH.sml:753.15 Error: syntax error: inserting  RBRACE

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:749.4 Error: syntax error: inserting  LOCAL
21_SCRATCH.sml:750.22 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:751.19 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:751.20 Error: syntax error: inserting  LPAREN
21_SCRATCH.sml:754.8-754.14 Error: syntax error: replacing  ORELSE with  AS
21_SCRATCH.sml:758.4 Error: syntax error: inserting  RPAREN
21_SCRATCH.sml:868.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:749.4 Error: syntax error: inserting  LOCAL
21_SCRATCH.sml:750.22 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:751.19 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:751.20 Error: syntax error: inserting  LPAREN
21_SCRATCH.sml:754.9-754.15 Error: syntax error: replacing  ORELSE with  AS
21_SCRATCH.sml:758.4 Error: syntax error: inserting  RPAREN
21_SCRATCH.sml:868.1 Error: syntax error found at EOF

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:748.24 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:749.14 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:756.9-756.15 Error: syntax error: replacing  ORELSE with  AS

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:748.24 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:749.14 Error: syntax error: replacing  WILD with  EQUALOP
21_SCRATCH.sml:756.9-756.15 Error: syntax error: replacing  ORELSE with  AS

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:751.22 Error: syntax error: replacing  WILD with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- use "21_SCRATCH.sml";
[opening 21_SCRATCH.sml]
datatype roofCut1
  = Decimal1 of real * real
  | Descriptive1 of string
  | English1 of int * int
  | Metric1 of real * real
  | Pitch1 of int * int
val slope_1 = fn : roofCut1 -> string
val TEST_001 = true : bool
val TEST_002 = true : bool
val TEST_003 = true : bool
val TEST_004 = true : bool
val TEST_005 = true : bool
datatype roofCut2
  = Decimal2 of real * real
  | Descriptive2 of string
  | English2 of int * int
  | Metric2 of real * real
  | Pitch2 of int * int
val slope_2 = fn : roofCut2 -> string
val TEST_006 = true : bool
val TEST_007 = true : bool
val TEST_008 = true : bool
val TEST_009 = true : bool
val TEST_010 = true : bool
val TEST_011 = true : bool
datatype roof = Decimal | Descriptive | English | Metric | Pitch
datatype pitch = Eighth | Full | Half | Num of int | Quarter | Third
val eval_pitch = fn : pitch -> int * int
val TEST_012 = true : bool
val TEST_013 = true : bool
val TEST_014 = true : bool
val TEST_015 = true : bool
val TEST_016 = true : bool
val TEST_017 = true : bool
datatype id = Name of string * string option * string | StudentNum of int
val sn = StudentNum 42 : id
val fl = Name ("First",NONE,"Last") : id
val fml = Name ("First",SOME "Middle","Last") : id
val eval_id = fn : id -> string
val TEST_T01 = true : bool
val TEST_fml = SOME "Middle" : string option
val TEST_fl = NONE : 'a option
val TEST_eval = fn : string option -> string
val TEST_T02 = true : bool
val TEST_T03 = true : bool
val TEST_T04 = true : bool
val TEST_018 = true : bool
val TEST_019 = true : bool
val TEST_020 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val eval = fn : exp -> int
val number_of_adds = fn : exp -> int
val example_exp = Add (Constant 19,Negate (Constant 4)) : exp
val example_ans = 15 : int
val example_addcount = 2 : int
val h = 8 : int
val i = 8.0 : real
val j = "8" : string
val k = true : bool
val l = #"l" : char
type ROOF = roof * pitch
val r1 = (English,Full) : ROOF
val r2 = (English,Half) : ROOF
val is_full_pitch1 = fn : ROOF -> bool
val is_full_pitch2 = fn : ROOF -> bool
val TEST_T05 = true : bool
val TEST_T06 = true : bool
val TEST_T07 = true : bool
val TEST_T08 = true : bool
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
type name_record =
  {first:string, last:string, middle:string option, student_num:int option}
val is_Queen_of_Spades1 = fn : card -> bool
val c1 = (Diamond,Ace) : card
val c2 = (Heart,Ace) : suit * rank
val c3 = (Spade,Ace) : suit * rank
val c4 = (Spade,Queen) : suit * rank
val is_Queen_of_Spades2 = fn : suit * rank -> bool
val TEST_021 = true : bool
val TEST_022 = true : bool
val TEST_023 = true : bool
val TEST_024 = true : bool
datatype exp
  = Add of exp * exp | Constant of int | Multiply of exp * exp | Negate of exp
val max_constant = fn : exp -> int
val test_exp = Add (Constant 19,Negate (Constant 4)) : exp
val test_exp2 = Add (Negate (Constant 5),Negate (Constant 4)) : exp
val nineteen = true : bool
val five = true : bool
val max_constant2 = fn : exp -> int
datatype my_int_list = Cons of int * my_int_list | Empty
val one2345 = Cons (1,Cons (2,Cons #)) : my_int_list
val six789 = Cons (6,Cons (7,Cons #)) : my_int_list
val eval_mil = fn : my_int_list -> int list
val append_mil = fn : my_int_list * my_int_list -> my_int_list
val zero = NONE : 'a option
val five = SOME 5 : int option
val nada = [] : 'a list
val mucho = [1,2,3,4,5,6,7,8,9] : int list
val uno2345 = [1,2,3,4,5] : int list
val sais789 = [6,7,8,9] : int list
val inc_or_zero = fn : int option -> int
val sum_list = fn : int list -> int
val append = fn : 'a list * 'a list -> 'a list
val TEST_025 = true : bool
val TEST_026 = true : bool
val TEST_027 = true : bool
val TEST_028 = true : bool
val TEST_029 = true : bool
val TEST_030 = true : bool
val TEST_031 = true : bool
val TEST_032 = true : bool
datatype StudentId = S_Name of string * string option * string | S_Num of int
val SIsn = S_Num 20181976 : StudentId
val SIfl = S_Name ("First",NONE,"Last") : StudentId
val SIfml = S_Name ("First",SOME "Middle","Last") : StudentId
val eval_Student_id = fn : StudentId -> string
val TEST_033 = true : bool
val TEST_034 = true : bool
val TEST_035 = true : bool
val sum_triple1 = fn : int * int * int -> int
val sum_triple2 = fn : int * int * int -> int
val sum_triple3 = fn : int * int * int -> int
val full_name1 = fn : {first:string, last:string, middle:string} -> string
val full_name2 = fn : {first:string, last:string, middle:string} -> string
val full_name3 = fn : {first:string, last:string, middle:string} -> string
val rotate_left = fn : 'a * 'b * 'c -> 'b * 'c * 'a
val rotate_right = fn : 'a * 'b * 'c -> 'c * 'a * 'b
val sum_triple4 = fn : int * int * int -> int
val full_name4 = fn : {first:string, last:string, middle:string} -> string
val sum_triple5 = fn : int * int * int -> int
val full_name5 = fn : {first:string, last:string, middle:string} -> string
val partial_sum = fn : int * 'a * int -> int
val partial_name = fn : {first:string, last:string, middle:'a} -> string
val append = fn : 'a list * 'a list -> 'a list
val ok1 = ["hi","bye","programming","languages"] : string list
val ok2 = [1,2,4,5] : int list
21_SCRATCH.sml:668.28 Warning: calling polyEqual
val same_thing = fn : ''a * ''a -> string
val is_three = fn : int -> string
exception ListLengthMismatch
val old_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val shallow_zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val zip3 = fn : 'a list * 'b list * 'c list -> ('a * 'b * 'c) list
val unzip3 = fn : ('a * 'b * 'c) list -> 'a list * 'b list * 'c list
val nondecreasing = fn : int list -> bool
datatype sgn = N | P | Z
val multsign = fn : int * int -> sgn
val len = fn : 'a list -> int
val it = () : unit
- 